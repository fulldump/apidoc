package apidoc

var Files = map[string]string{
	"apidoc/apidoc.css": `LyogdGhpcyBpcyBhcGlkb2MuY3NzICov`,
	"apidoc/apidoc.js": `YWxlcnQoJ3RoaXMgaXMgYXBpZG9jLmpzJyk=`,
	"favicon.ico": `AAABAAEAEBAQAAEABAAoAQAAFgAAACgAAAAQAAAAIAAAAAEABAAAAAAAgAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAA/4QAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABEAABEAAAABEAAAARAAABEAAAAAEQAAEQAAAAARAAARAAAAABEAABEAAAAAEQABEAAAAAABEAEQAAAAAAEQABEAAAAAEQAAEQAAAAARAAARAAAAABEAABEAAAAAEQAAARAAAAEQAAAAEQAAEQAAAAAAAAAAAAD//wAA888AAOfnAADP8wAAz/MAAM/zAADP8wAAn/kAAJ/5AADP8wAAz/MAAM/zAADP8wAA5+cAAPPPAAD//wAA`,
	"highlightjs/highlight.js": ``,
	"highlightjs/highlight.min.js": ``,
	"highlightjs/styles/github.css": `LyoKZ2l0aHViLmNvbSBzdHlsZSAoYykgVmFzaWx5IFBvbG92bnlvdiA8dmFzdEB3aGl0ZWFudHMubmV0PgoqLwoKLmhsanMgewogIGRpc3BsYXk6IGJsb2NrOwogIG92ZXJmbG93LXg6IGF1dG87CiAgcGFkZGluZzogMC41ZW07CiAgY29sb3I6ICMzMzM7CiAgYmFja2dyb3VuZDogI2Y4ZjhmODsKfQoKLmhsanMtY29tbWVudCwKLmhsanMtcXVvdGUgewogIGNvbG9yOiAjOTk4OwogIGZvbnQtc3R5bGU6IGl0YWxpYzsKfQoKLmhsanMta2V5d29yZCwKLmhsanMtc2VsZWN0b3ItdGFnLAouaGxqcy1zdWJzdCB7CiAgY29sb3I6ICMzMzM7CiAgZm9udC13ZWlnaHQ6IGJvbGQ7Cn0KCi5obGpzLW51bWJlciwKLmhsanMtbGl0ZXJhbCwKLmhsanMtdmFyaWFibGUsCi5obGpzLXRlbXBsYXRlLXZhcmlhYmxlLAouaGxqcy10YWcgLmhsanMtYXR0ciB7CiAgY29sb3I6ICMwMDgwODA7Cn0KCi5obGpzLXN0cmluZywKLmhsanMtZG9jdGFnIHsKICBjb2xvcjogI2QxNDsKfQoKLmhsanMtdGl0bGUsCi5obGpzLXNlY3Rpb24sCi5obGpzLXNlbGVjdG9yLWlkIHsKICBjb2xvcjogIzkwMDsKICBmb250LXdlaWdodDogYm9sZDsKfQoKLmhsanMtc3Vic3QgewogIGZvbnQtd2VpZ2h0OiBub3JtYWw7Cn0KCi5obGpzLXR5cGUsCi5obGpzLWNsYXNzIC5obGpzLXRpdGxlIHsKICBjb2xvcjogIzQ1ODsKICBmb250LXdlaWdodDogYm9sZDsKfQoKLmhsanMtdGFnLAouaGxqcy1uYW1lLAouaGxqcy1hdHRyaWJ1dGUgewogIGNvbG9yOiAjMDAwMDgwOwogIGZvbnQtd2VpZ2h0OiBub3JtYWw7Cn0KCi5obGpzLXJlZ2V4cCwKLmhsanMtbGluayB7CiAgY29sb3I6ICMwMDk5MjY7Cn0KCi5obGpzLXN5bWJvbCwKLmhsanMtYnVsbGV0IHsKICBjb2xvcjogIzk5MDA3MzsKfQoKLmhsanMtYnVpbHRfaW4sCi5obGpzLWJ1aWx0aW4tbmFtZSB7CiAgY29sb3I6ICMwMDg2YjM7Cn0KCi5obGpzLW1ldGEgewogIGNvbG9yOiAjOTk5OwogIGZvbnQtd2VpZ2h0OiBib2xkOwp9CgouaGxqcy1kZWxldGlvbiB7CiAgYmFja2dyb3VuZDogI2ZkZDsKfQoKLmhsanMtYWRkaXRpb24gewogIGJhY2tncm91bmQ6ICNkZmQ7Cn0KCi5obGpzLWVtcGhhc2lzIHsKICBmb250LXN0eWxlOiBpdGFsaWM7Cn0KCi5obGpzLXN0cm9uZyB7CiAgZm9udC13ZWlnaHQ6IGJvbGQ7Cn0=`,
	"index.html": `PCFET0NUWVBFIGh0bWw+CjxodG1sPgoJPGhlYWQ+CgkJPG1ldGEgaHR0cC1lcXVpdj0iQ29udGVudC1UeXBlIiBDT05URU5UPSJ0ZXh0L2h0bWw7IGNoYXJzZXQ9VVRGLTgiPgoJCTxtZXRhIG5hbWU9InZpZXdwb3J0IiBjb250ZW50PSJ3aWR0aD1kZXZpY2Utd2lkdGgsIGluaXRpYWwtc2NhbGU9MS4wLCBtYXhpbXVtLXNjYWxlPTEuMCwgdXNlci1zY2FsYWJsZT1ubyI+CgkJPHRpdGxlPkFwaSBEb2M8L3RpdGxlPgoJCTxsaW5rIGhyZWY9InN0YXRpYy9mYXZpY29uLmljbyIgcmVsPSJpY29uIiB0eXBlPSJpbWFnZS94LWljb24iPgoJPC9oZWFkPgoJPGJvZHk+CgkJPGgxPkFwaURvYzwvaDE+Cgk8L2JvZHk+CjwvaHRtbD4=`,
	"marked/marked.js": `LyoqCiAqIG1hcmtlZCAtIGEgbWFya2Rvd24gcGFyc2VyCiAqIENvcHlyaWdodCAoYykgMjAxMS0yMDE0LCBDaHJpc3RvcGhlciBKZWZmcmV5LiAoTUlUIExpY2Vuc2VkKQogKiBodHRwczovL2dpdGh1Yi5jb20vY2hqai9tYXJrZWQKICovCgo7KGZ1bmN0aW9uKCkgewoKLyoqCiAqIEJsb2NrLUxldmVsIEdyYW1tYXIKICovCgp2YXIgYmxvY2sgPSB7CiAgbmV3bGluZTogL15cbisvLAogIGNvZGU6IC9eKCB7NH1bXlxuXStcbiopKy8sCiAgZmVuY2VzOiBub29wLAogIGhyOiAvXiggKlstKl9dKXszLH0gKig/OlxuK3wkKS8sCiAgaGVhZGluZzogL14gKigjezEsNn0pICooW15cbl0rPykgKiMqICooPzpcbit8JCkvLAogIG5wdGFibGU6IG5vb3AsCiAgbGhlYWRpbmc6IC9eKFteXG5dKylcbiAqKD18LSl7Mix9ICooPzpcbit8JCkvLAogIGJsb2NrcXVvdGU6IC9eKCAqPlteXG5dKyhcbig/IWRlZilbXlxuXSspKlxuKikrLywKICBsaXN0OiAvXiggKikoYnVsbCkgW1xzXFNdKz8oPzpocnxkZWZ8XG57Mix9KD8hICkoPyFcMWJ1bGwgKVxuKnxccyokKS8sCiAgaHRtbDogL14gKig/OmNvbW1lbnQgKig/OlxufFxzKiQpfGNsb3NlZCAqKD86XG57Mix9fFxzKiQpfGNsb3NpbmcgKig/OlxuezIsfXxccyokKSkvLAogIGRlZjogL14gKlxbKFteXF1dKylcXTogKjw/KFteXHM+XSspPj8oPzogK1siKF0oW15cbl0rKVsiKV0pPyAqKD86XG4rfCQpLywKICB0YWJsZTogbm9vcCwKICBwYXJhZ3JhcGg6IC9eKCg/OlteXG5dK1xuPyg/IWhyfGhlYWRpbmd8bGhlYWRpbmd8YmxvY2txdW90ZXx0YWd8ZGVmKSkrKVxuKi8sCiAgdGV4dDogL15bXlxuXSsvCn07CgpibG9jay5idWxsZXQgPSAvKD86WyorLV18XGQrXC4pLzsKYmxvY2suaXRlbSA9IC9eKCAqKShidWxsKSBbXlxuXSooPzpcbig/IVwxYnVsbCApW15cbl0qKSovOwpibG9jay5pdGVtID0gcmVwbGFjZShibG9jay5pdGVtLCAnZ20nKQogICgvYnVsbC9nLCBibG9jay5idWxsZXQpCiAgKCk7CgpibG9jay5saXN0ID0gcmVwbGFjZShibG9jay5saXN0KQogICgvYnVsbC9nLCBibG9jay5idWxsZXQpCiAgKCdocicsICdcXG4rKD89XFwxPyg/OlstKl9dICopezMsfSg/Olxcbit8JCkpJykKICAoJ2RlZicsICdcXG4rKD89JyArIGJsb2NrLmRlZi5zb3VyY2UgKyAnKScpCiAgKCk7CgpibG9jay5ibG9ja3F1b3RlID0gcmVwbGFjZShibG9jay5ibG9ja3F1b3RlKQogICgnZGVmJywgYmxvY2suZGVmKQogICgpOwoKYmxvY2suX3RhZyA9ICcoPyEoPzonCiAgKyAnYXxlbXxzdHJvbmd8c21hbGx8c3xjaXRlfHF8ZGZufGFiYnJ8ZGF0YXx0aW1lfGNvZGUnCiAgKyAnfHZhcnxzYW1wfGtiZHxzdWJ8c3VwfGl8Ynx1fG1hcmt8cnVieXxydHxycHxiZGl8YmRvJwogICsgJ3xzcGFufGJyfHdicnxpbnN8ZGVsfGltZylcXGIpXFx3Kyg/ITovfFteXFx3XFxzQF0qQClcXGInOwoKYmxvY2suaHRtbCA9IHJlcGxhY2UoYmxvY2suaHRtbCkKICAoJ2NvbW1lbnQnLCAvPCEtLVtcc1xTXSo/LS0+LykKICAoJ2Nsb3NlZCcsIC88KHRhZylbXHNcU10rPzxcL1wxPi8pCiAgKCdjbG9zaW5nJywgLzx0YWcoPzoiW14iXSoifCdbXiddKid8W14nIj5dKSo/Pi8pCiAgKC90YWcvZywgYmxvY2suX3RhZykKICAoKTsKCmJsb2NrLnBhcmFncmFwaCA9IHJlcGxhY2UoYmxvY2sucGFyYWdyYXBoKQogICgnaHInLCBibG9jay5ocikKICAoJ2hlYWRpbmcnLCBibG9jay5oZWFkaW5nKQogICgnbGhlYWRpbmcnLCBibG9jay5saGVhZGluZykKICAoJ2Jsb2NrcXVvdGUnLCBibG9jay5ibG9ja3F1b3RlKQogICgndGFnJywgJzwnICsgYmxvY2suX3RhZykKICAoJ2RlZicsIGJsb2NrLmRlZikKICAoKTsKCi8qKgogKiBOb3JtYWwgQmxvY2sgR3JhbW1hcgogKi8KCmJsb2NrLm5vcm1hbCA9IG1lcmdlKHt9LCBibG9jayk7CgovKioKICogR0ZNIEJsb2NrIEdyYW1tYXIKICovCgpibG9jay5nZm0gPSBtZXJnZSh7fSwgYmxvY2subm9ybWFsLCB7CiAgZmVuY2VzOiAvXiAqKGB7Myx9fH57Myx9KVsgXC5dKihcUyspPyAqXG4oW1xzXFNdKj8pXHMqXDEgKig/OlxuK3wkKS8sCiAgcGFyYWdyYXBoOiAvXi8sCiAgaGVhZGluZzogL14gKigjezEsNn0pICsoW15cbl0rPykgKiMqICooPzpcbit8JCkvCn0pOwoKYmxvY2suZ2ZtLnBhcmFncmFwaCA9IHJlcGxhY2UoYmxvY2sucGFyYWdyYXBoKQogICgnKD8hJywgJyg/IScKICAgICsgYmxvY2suZ2ZtLmZlbmNlcy5zb3VyY2UucmVwbGFjZSgnXFwxJywgJ1xcMicpICsgJ3wnCiAgICArIGJsb2NrLmxpc3Quc291cmNlLnJlcGxhY2UoJ1xcMScsICdcXDMnKSArICd8JykKICAoKTsKCi8qKgogKiBHRk0gKyBUYWJsZXMgQmxvY2sgR3JhbW1hcgogKi8KCmJsb2NrLnRhYmxlcyA9IG1lcmdlKHt9LCBibG9jay5nZm0sIHsKICBucHRhYmxlOiAvXiAqKFxTLipcfC4qKVxuICooWy06XSsgKlx8Wy18IDpdKilcbigoPzouKlx8LiooPzpcbnwkKSkqKVxuKi8sCiAgdGFibGU6IC9eICpcfCguKylcbiAqXHwoICpbLTpdK1stfCA6XSopXG4oKD86ICpcfC4qKD86XG58JCkpKilcbiovCn0pOwoKLyoqCiAqIEJsb2NrIExleGVyCiAqLwoKZnVuY3Rpb24gTGV4ZXIob3B0aW9ucykgewogIHRoaXMudG9rZW5zID0gW107CiAgdGhpcy50b2tlbnMubGlua3MgPSB7fTsKICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zIHx8IG1hcmtlZC5kZWZhdWx0czsKICB0aGlzLnJ1bGVzID0gYmxvY2subm9ybWFsOwoKICBpZiAodGhpcy5vcHRpb25zLmdmbSkgewogICAgaWYgKHRoaXMub3B0aW9ucy50YWJsZXMpIHsKICAgICAgdGhpcy5ydWxlcyA9IGJsb2NrLnRhYmxlczsKICAgIH0gZWxzZSB7CiAgICAgIHRoaXMucnVsZXMgPSBibG9jay5nZm07CiAgICB9CiAgfQp9CgovKioKICogRXhwb3NlIEJsb2NrIFJ1bGVzCiAqLwoKTGV4ZXIucnVsZXMgPSBibG9jazsKCi8qKgogKiBTdGF0aWMgTGV4IE1ldGhvZAogKi8KCkxleGVyLmxleCA9IGZ1bmN0aW9uKHNyYywgb3B0aW9ucykgewogIHZhciBsZXhlciA9IG5ldyBMZXhlcihvcHRpb25zKTsKICByZXR1cm4gbGV4ZXIubGV4KHNyYyk7Cn07CgovKioKICogUHJlcHJvY2Vzc2luZwogKi8KCkxleGVyLnByb3RvdHlwZS5sZXggPSBmdW5jdGlvbihzcmMpIHsKICBzcmMgPSBzcmMKICAgIC5yZXBsYWNlKC9cclxufFxyL2csICdcbicpCiAgICAucmVwbGFjZSgvXHQvZywgJyAgICAnKQogICAgLnJlcGxhY2UoL1x1MDBhMC9nLCAnICcpCiAgICAucmVwbGFjZSgvXHUyNDI0L2csICdcbicpOwoKICByZXR1cm4gdGhpcy50b2tlbihzcmMsIHRydWUpOwp9OwoKLyoqCiAqIExleGluZwogKi8KCkxleGVyLnByb3RvdHlwZS50b2tlbiA9IGZ1bmN0aW9uKHNyYywgdG9wLCBicSkgewogIHZhciBzcmMgPSBzcmMucmVwbGFjZSgvXiArJC9nbSwgJycpCiAgICAsIG5leHQKICAgICwgbG9vc2UKICAgICwgY2FwCiAgICAsIGJ1bGwKICAgICwgYgogICAgLCBpdGVtCiAgICAsIHNwYWNlCiAgICAsIGkKICAgICwgbDsKCiAgd2hpbGUgKHNyYykgewogICAgLy8gbmV3bGluZQogICAgaWYgKGNhcCA9IHRoaXMucnVsZXMubmV3bGluZS5leGVjKHNyYykpIHsKICAgICAgc3JjID0gc3JjLnN1YnN0cmluZyhjYXBbMF0ubGVuZ3RoKTsKICAgICAgaWYgKGNhcFswXS5sZW5ndGggPiAxKSB7CiAgICAgICAgdGhpcy50b2tlbnMucHVzaCh7CiAgICAgICAgICB0eXBlOiAnc3BhY2UnCiAgICAgICAgfSk7CiAgICAgIH0KICAgIH0KCiAgICAvLyBjb2RlCiAgICBpZiAoY2FwID0gdGhpcy5ydWxlcy5jb2RlLmV4ZWMoc3JjKSkgewogICAgICBzcmMgPSBzcmMuc3Vic3RyaW5nKGNhcFswXS5sZW5ndGgpOwogICAgICBjYXAgPSBjYXBbMF0ucmVwbGFjZSgvXiB7NH0vZ20sICcnKTsKICAgICAgdGhpcy50b2tlbnMucHVzaCh7CiAgICAgICAgdHlwZTogJ2NvZGUnLAogICAgICAgIHRleHQ6ICF0aGlzLm9wdGlvbnMucGVkYW50aWMKICAgICAgICAgID8gY2FwLnJlcGxhY2UoL1xuKyQvLCAnJykKICAgICAgICAgIDogY2FwCiAgICAgIH0pOwogICAgICBjb250aW51ZTsKICAgIH0KCiAgICAvLyBmZW5jZXMgKGdmbSkKICAgIGlmIChjYXAgPSB0aGlzLnJ1bGVzLmZlbmNlcy5leGVjKHNyYykpIHsKICAgICAgc3JjID0gc3JjLnN1YnN0cmluZyhjYXBbMF0ubGVuZ3RoKTsKICAgICAgdGhpcy50b2tlbnMucHVzaCh7CiAgICAgICAgdHlwZTogJ2NvZGUnLAogICAgICAgIGxhbmc6IGNhcFsyXSwKICAgICAgICB0ZXh0OiBjYXBbM10gfHwgJycKICAgICAgfSk7CiAgICAgIGNvbnRpbnVlOwogICAgfQoKICAgIC8vIGhlYWRpbmcKICAgIGlmIChjYXAgPSB0aGlzLnJ1bGVzLmhlYWRpbmcuZXhlYyhzcmMpKSB7CiAgICAgIHNyYyA9IHNyYy5zdWJzdHJpbmcoY2FwWzBdLmxlbmd0aCk7CiAgICAgIHRoaXMudG9rZW5zLnB1c2goewogICAgICAgIHR5cGU6ICdoZWFkaW5nJywKICAgICAgICBkZXB0aDogY2FwWzFdLmxlbmd0aCwKICAgICAgICB0ZXh0OiBjYXBbMl0KICAgICAgfSk7CiAgICAgIGNvbnRpbnVlOwogICAgfQoKICAgIC8vIHRhYmxlIG5vIGxlYWRpbmcgcGlwZSAoZ2ZtKQogICAgaWYgKHRvcCAmJiAoY2FwID0gdGhpcy5ydWxlcy5ucHRhYmxlLmV4ZWMoc3JjKSkpIHsKICAgICAgc3JjID0gc3JjLnN1YnN0cmluZyhjYXBbMF0ubGVuZ3RoKTsKCiAgICAgIGl0ZW0gPSB7CiAgICAgICAgdHlwZTogJ3RhYmxlJywKICAgICAgICBoZWFkZXI6IGNhcFsxXS5yZXBsYWNlKC9eICp8ICpcfCAqJC9nLCAnJykuc3BsaXQoLyAqXHwgKi8pLAogICAgICAgIGFsaWduOiBjYXBbMl0ucmVwbGFjZSgvXiAqfFx8ICokL2csICcnKS5zcGxpdCgvICpcfCAqLyksCiAgICAgICAgY2VsbHM6IGNhcFszXS5yZXBsYWNlKC9cbiQvLCAnJykuc3BsaXQoJ1xuJykKICAgICAgfTsKCiAgICAgIGZvciAoaSA9IDA7IGkgPCBpdGVtLmFsaWduLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgaWYgKC9eICotKzogKiQvLnRlc3QoaXRlbS5hbGlnbltpXSkpIHsKICAgICAgICAgIGl0ZW0uYWxpZ25baV0gPSAncmlnaHQnOwogICAgICAgIH0gZWxzZSBpZiAoL14gKjotKzogKiQvLnRlc3QoaXRlbS5hbGlnbltpXSkpIHsKICAgICAgICAgIGl0ZW0uYWxpZ25baV0gPSAnY2VudGVyJzsKICAgICAgICB9IGVsc2UgaWYgKC9eICo6LSsgKiQvLnRlc3QoaXRlbS5hbGlnbltpXSkpIHsKICAgICAgICAgIGl0ZW0uYWxpZ25baV0gPSAnbGVmdCc7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIGl0ZW0uYWxpZ25baV0gPSBudWxsOwogICAgICAgIH0KICAgICAgfQoKICAgICAgZm9yIChpID0gMDsgaSA8IGl0ZW0uY2VsbHMubGVuZ3RoOyBpKyspIHsKICAgICAgICBpdGVtLmNlbGxzW2ldID0gaXRlbS5jZWxsc1tpXS5zcGxpdCgvICpcfCAqLyk7CiAgICAgIH0KCiAgICAgIHRoaXMudG9rZW5zLnB1c2goaXRlbSk7CgogICAgICBjb250aW51ZTsKICAgIH0KCiAgICAvLyBsaGVhZGluZwogICAgaWYgKGNhcCA9IHRoaXMucnVsZXMubGhlYWRpbmcuZXhlYyhzcmMpKSB7CiAgICAgIHNyYyA9IHNyYy5zdWJzdHJpbmcoY2FwWzBdLmxlbmd0aCk7CiAgICAgIHRoaXMudG9rZW5zLnB1c2goewogICAgICAgIHR5cGU6ICdoZWFkaW5nJywKICAgICAgICBkZXB0aDogY2FwWzJdID09PSAnPScgPyAxIDogMiwKICAgICAgICB0ZXh0OiBjYXBbMV0KICAgICAgfSk7CiAgICAgIGNvbnRpbnVlOwogICAgfQoKICAgIC8vIGhyCiAgICBpZiAoY2FwID0gdGhpcy5ydWxlcy5oci5leGVjKHNyYykpIHsKICAgICAgc3JjID0gc3JjLnN1YnN0cmluZyhjYXBbMF0ubGVuZ3RoKTsKICAgICAgdGhpcy50b2tlbnMucHVzaCh7CiAgICAgICAgdHlwZTogJ2hyJwogICAgICB9KTsKICAgICAgY29udGludWU7CiAgICB9CgogICAgLy8gYmxvY2txdW90ZQogICAgaWYgKGNhcCA9IHRoaXMucnVsZXMuYmxvY2txdW90ZS5leGVjKHNyYykpIHsKICAgICAgc3JjID0gc3JjLnN1YnN0cmluZyhjYXBbMF0ubGVuZ3RoKTsKCiAgICAgIHRoaXMudG9rZW5zLnB1c2goewogICAgICAgIHR5cGU6ICdibG9ja3F1b3RlX3N0YXJ0JwogICAgICB9KTsKCiAgICAgIGNhcCA9IGNhcFswXS5yZXBsYWNlKC9eICo+ID8vZ20sICcnKTsKCiAgICAgIC8vIFBhc3MgYHRvcGAgdG8ga2VlcCB0aGUgY3VycmVudAogICAgICAvLyAidG9wbGV2ZWwiIHN0YXRlLiBUaGlzIGlzIGV4YWN0bHkKICAgICAgLy8gaG93IG1hcmtkb3duLnBsIHdvcmtzLgogICAgICB0aGlzLnRva2VuKGNhcCwgdG9wLCB0cnVlKTsKCiAgICAgIHRoaXMudG9rZW5zLnB1c2goewogICAgICAgIHR5cGU6ICdibG9ja3F1b3RlX2VuZCcKICAgICAgfSk7CgogICAgICBjb250aW51ZTsKICAgIH0KCiAgICAvLyBsaXN0CiAgICBpZiAoY2FwID0gdGhpcy5ydWxlcy5saXN0LmV4ZWMoc3JjKSkgewogICAgICBzcmMgPSBzcmMuc3Vic3RyaW5nKGNhcFswXS5sZW5ndGgpOwogICAgICBidWxsID0gY2FwWzJdOwoKICAgICAgdGhpcy50b2tlbnMucHVzaCh7CiAgICAgICAgdHlwZTogJ2xpc3Rfc3RhcnQnLAogICAgICAgIG9yZGVyZWQ6IGJ1bGwubGVuZ3RoID4gMQogICAgICB9KTsKCiAgICAgIC8vIEdldCBlYWNoIHRvcC1sZXZlbCBpdGVtLgogICAgICBjYXAgPSBjYXBbMF0ubWF0Y2godGhpcy5ydWxlcy5pdGVtKTsKCiAgICAgIG5leHQgPSBmYWxzZTsKICAgICAgbCA9IGNhcC5sZW5ndGg7CiAgICAgIGkgPSAwOwoKICAgICAgZm9yICg7IGkgPCBsOyBpKyspIHsKICAgICAgICBpdGVtID0gY2FwW2ldOwoKICAgICAgICAvLyBSZW1vdmUgdGhlIGxpc3QgaXRlbSdzIGJ1bGxldAogICAgICAgIC8vIHNvIGl0IGlzIHNlZW4gYXMgdGhlIG5leHQgdG9rZW4uCiAgICAgICAgc3BhY2UgPSBpdGVtLmxlbmd0aDsKICAgICAgICBpdGVtID0gaXRlbS5yZXBsYWNlKC9eICooWyorLV18XGQrXC4pICsvLCAnJyk7CgogICAgICAgIC8vIE91dGRlbnQgd2hhdGV2ZXIgdGhlCiAgICAgICAgLy8gbGlzdCBpdGVtIGNvbnRhaW5zLiBIYWNreS4KICAgICAgICBpZiAofml0ZW0uaW5kZXhPZignXG4gJykpIHsKICAgICAgICAgIHNwYWNlIC09IGl0ZW0ubGVuZ3RoOwogICAgICAgICAgaXRlbSA9ICF0aGlzLm9wdGlvbnMucGVkYW50aWMKICAgICAgICAgICAgPyBpdGVtLnJlcGxhY2UobmV3IFJlZ0V4cCgnXiB7MSwnICsgc3BhY2UgKyAnfScsICdnbScpLCAnJykKICAgICAgICAgICAgOiBpdGVtLnJlcGxhY2UoL14gezEsNH0vZ20sICcnKTsKICAgICAgICB9CgogICAgICAgIC8vIERldGVybWluZSB3aGV0aGVyIHRoZSBuZXh0IGxpc3QgaXRlbSBiZWxvbmdzIGhlcmUuCiAgICAgICAgLy8gQmFja3BlZGFsIGlmIGl0IGRvZXMgbm90IGJlbG9uZyBpbiB0aGlzIGxpc3QuCiAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5zbWFydExpc3RzICYmIGkgIT09IGwgLSAxKSB7CiAgICAgICAgICBiID0gYmxvY2suYnVsbGV0LmV4ZWMoY2FwW2kgKyAxXSlbMF07CiAgICAgICAgICBpZiAoYnVsbCAhPT0gYiAmJiAhKGJ1bGwubGVuZ3RoID4gMSAmJiBiLmxlbmd0aCA+IDEpKSB7CiAgICAgICAgICAgIHNyYyA9IGNhcC5zbGljZShpICsgMSkuam9pbignXG4nKSArIHNyYzsKICAgICAgICAgICAgaSA9IGwgLSAxOwogICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgLy8gRGV0ZXJtaW5lIHdoZXRoZXIgaXRlbSBpcyBsb29zZSBvciBub3QuCiAgICAgICAgLy8gVXNlOiAvKF58XG4pKD8hIClbXlxuXStcblxuKD8hXHMqJCkvCiAgICAgICAgLy8gZm9yIGRpc2NvdW50IGJlaGF2aW9yLgogICAgICAgIGxvb3NlID0gbmV4dCB8fCAvXG5cbig/IVxzKiQpLy50ZXN0KGl0ZW0pOwogICAgICAgIGlmIChpICE9PSBsIC0gMSkgewogICAgICAgICAgbmV4dCA9IGl0ZW0uY2hhckF0KGl0ZW0ubGVuZ3RoIC0gMSkgPT09ICdcbic7CiAgICAgICAgICBpZiAoIWxvb3NlKSBsb29zZSA9IG5leHQ7CiAgICAgICAgfQoKICAgICAgICB0aGlzLnRva2Vucy5wdXNoKHsKICAgICAgICAgIHR5cGU6IGxvb3NlCiAgICAgICAgICAgID8gJ2xvb3NlX2l0ZW1fc3RhcnQnCiAgICAgICAgICAgIDogJ2xpc3RfaXRlbV9zdGFydCcKICAgICAgICB9KTsKCiAgICAgICAgLy8gUmVjdXJzZS4KICAgICAgICB0aGlzLnRva2VuKGl0ZW0sIGZhbHNlLCBicSk7CgogICAgICAgIHRoaXMudG9rZW5zLnB1c2goewogICAgICAgICAgdHlwZTogJ2xpc3RfaXRlbV9lbmQnCiAgICAgICAgfSk7CiAgICAgIH0KCiAgICAgIHRoaXMudG9rZW5zLnB1c2goewogICAgICAgIHR5cGU6ICdsaXN0X2VuZCcKICAgICAgfSk7CgogICAgICBjb250aW51ZTsKICAgIH0KCiAgICAvLyBodG1sCiAgICBpZiAoY2FwID0gdGhpcy5ydWxlcy5odG1sLmV4ZWMoc3JjKSkgewogICAgICBzcmMgPSBzcmMuc3Vic3RyaW5nKGNhcFswXS5sZW5ndGgpOwogICAgICB0aGlzLnRva2Vucy5wdXNoKHsKICAgICAgICB0eXBlOiB0aGlzLm9wdGlvbnMuc2FuaXRpemUKICAgICAgICAgID8gJ3BhcmFncmFwaCcKICAgICAgICAgIDogJ2h0bWwnLAogICAgICAgIHByZTogIXRoaXMub3B0aW9ucy5zYW5pdGl6ZXIKICAgICAgICAgICYmIChjYXBbMV0gPT09ICdwcmUnIHx8IGNhcFsxXSA9PT0gJ3NjcmlwdCcgfHwgY2FwWzFdID09PSAnc3R5bGUnKSwKICAgICAgICB0ZXh0OiBjYXBbMF0KICAgICAgfSk7CiAgICAgIGNvbnRpbnVlOwogICAgfQoKICAgIC8vIGRlZgogICAgaWYgKCghYnEgJiYgdG9wKSAmJiAoY2FwID0gdGhpcy5ydWxlcy5kZWYuZXhlYyhzcmMpKSkgewogICAgICBzcmMgPSBzcmMuc3Vic3RyaW5nKGNhcFswXS5sZW5ndGgpOwogICAgICB0aGlzLnRva2Vucy5saW5rc1tjYXBbMV0udG9Mb3dlckNhc2UoKV0gPSB7CiAgICAgICAgaHJlZjogY2FwWzJdLAogICAgICAgIHRpdGxlOiBjYXBbM10KICAgICAgfTsKICAgICAgY29udGludWU7CiAgICB9CgogICAgLy8gdGFibGUgKGdmbSkKICAgIGlmICh0b3AgJiYgKGNhcCA9IHRoaXMucnVsZXMudGFibGUuZXhlYyhzcmMpKSkgewogICAgICBzcmMgPSBzcmMuc3Vic3RyaW5nKGNhcFswXS5sZW5ndGgpOwoKICAgICAgaXRlbSA9IHsKICAgICAgICB0eXBlOiAndGFibGUnLAogICAgICAgIGhlYWRlcjogY2FwWzFdLnJlcGxhY2UoL14gKnwgKlx8ICokL2csICcnKS5zcGxpdCgvICpcfCAqLyksCiAgICAgICAgYWxpZ246IGNhcFsyXS5yZXBsYWNlKC9eICp8XHwgKiQvZywgJycpLnNwbGl0KC8gKlx8ICovKSwKICAgICAgICBjZWxsczogY2FwWzNdLnJlcGxhY2UoLyg/OiAqXHwgKik/XG4kLywgJycpLnNwbGl0KCdcbicpCiAgICAgIH07CgogICAgICBmb3IgKGkgPSAwOyBpIDwgaXRlbS5hbGlnbi5sZW5ndGg7IGkrKykgewogICAgICAgIGlmICgvXiAqLSs6ICokLy50ZXN0KGl0ZW0uYWxpZ25baV0pKSB7CiAgICAgICAgICBpdGVtLmFsaWduW2ldID0gJ3JpZ2h0JzsKICAgICAgICB9IGVsc2UgaWYgKC9eICo6LSs6ICokLy50ZXN0KGl0ZW0uYWxpZ25baV0pKSB7CiAgICAgICAgICBpdGVtLmFsaWduW2ldID0gJ2NlbnRlcic7CiAgICAgICAgfSBlbHNlIGlmICgvXiAqOi0rICokLy50ZXN0KGl0ZW0uYWxpZ25baV0pKSB7CiAgICAgICAgICBpdGVtLmFsaWduW2ldID0gJ2xlZnQnOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICBpdGVtLmFsaWduW2ldID0gbnVsbDsKICAgICAgICB9CiAgICAgIH0KCiAgICAgIGZvciAoaSA9IDA7IGkgPCBpdGVtLmNlbGxzLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgaXRlbS5jZWxsc1tpXSA9IGl0ZW0uY2VsbHNbaV0KICAgICAgICAgIC5yZXBsYWNlKC9eICpcfCAqfCAqXHwgKiQvZywgJycpCiAgICAgICAgICAuc3BsaXQoLyAqXHwgKi8pOwogICAgICB9CgogICAgICB0aGlzLnRva2Vucy5wdXNoKGl0ZW0pOwoKICAgICAgY29udGludWU7CiAgICB9CgogICAgLy8gdG9wLWxldmVsIHBhcmFncmFwaAogICAgaWYgKHRvcCAmJiAoY2FwID0gdGhpcy5ydWxlcy5wYXJhZ3JhcGguZXhlYyhzcmMpKSkgewogICAgICBzcmMgPSBzcmMuc3Vic3RyaW5nKGNhcFswXS5sZW5ndGgpOwogICAgICB0aGlzLnRva2Vucy5wdXNoKHsKICAgICAgICB0eXBlOiAncGFyYWdyYXBoJywKICAgICAgICB0ZXh0OiBjYXBbMV0uY2hhckF0KGNhcFsxXS5sZW5ndGggLSAxKSA9PT0gJ1xuJwogICAgICAgICAgPyBjYXBbMV0uc2xpY2UoMCwgLTEpCiAgICAgICAgICA6IGNhcFsxXQogICAgICB9KTsKICAgICAgY29udGludWU7CiAgICB9CgogICAgLy8gdGV4dAogICAgaWYgKGNhcCA9IHRoaXMucnVsZXMudGV4dC5leGVjKHNyYykpIHsKICAgICAgLy8gVG9wLWxldmVsIHNob3VsZCBuZXZlciByZWFjaCBoZXJlLgogICAgICBzcmMgPSBzcmMuc3Vic3RyaW5nKGNhcFswXS5sZW5ndGgpOwogICAgICB0aGlzLnRva2Vucy5wdXNoKHsKICAgICAgICB0eXBlOiAndGV4dCcsCiAgICAgICAgdGV4dDogY2FwWzBdCiAgICAgIH0pOwogICAgICBjb250aW51ZTsKICAgIH0KCiAgICBpZiAoc3JjKSB7CiAgICAgIHRocm93IG5ldwogICAgICAgIEVycm9yKCdJbmZpbml0ZSBsb29wIG9uIGJ5dGU6ICcgKyBzcmMuY2hhckNvZGVBdCgwKSk7CiAgICB9CiAgfQoKICByZXR1cm4gdGhpcy50b2tlbnM7Cn07CgovKioKICogSW5saW5lLUxldmVsIEdyYW1tYXIKICovCgp2YXIgaW5saW5lID0gewogIGVzY2FwZTogL15cXChbXFxgKnt9XFtcXSgpIytcLS4hXz5dKS8sCiAgYXV0b2xpbms6IC9ePChbXiA+XSsoQHw6XC8pW14gPl0rKT4vLAogIHVybDogbm9vcCwKICB0YWc6IC9ePCEtLVtcc1xTXSo/LS0+fF48XC8/XHcrKD86IlteIl0qInwnW14nXSonfFteJyI+XSkqPz4vLAogIGxpbms6IC9eIT9cWyhpbnNpZGUpXF1cKGhyZWZcKS8sCiAgcmVmbGluazogL14hP1xbKGluc2lkZSlcXVxzKlxbKFteXF1dKilcXS8sCiAgbm9saW5rOiAvXiE/XFsoKD86XFtbXlxdXSpcXXxbXlxbXF1dKSopXF0vLAogIHN0cm9uZzogL15fXyhbXHNcU10rPylfXyg/IV8pfF5cKlwqKFtcc1xTXSs/KVwqXCooPyFcKikvLAogIGVtOiAvXlxiXygoPzpbXl9dfF9fKSs/KV9cYnxeXCooKD86XCpcKnxbXHNcU10pKz8pXCooPyFcKikvLAogIGNvZGU6IC9eKGArKVxzKihbXHNcU10qP1teYF0pXHMqXDEoPyFgKS8sCiAgYnI6IC9eIHsyLH1cbig/IVxzKiQpLywKICBkZWw6IG5vb3AsCiAgdGV4dDogL15bXHNcU10rPyg/PVtcXDwhXFtfKmBdfCB7Mix9XG58JCkvCn07CgppbmxpbmUuX2luc2lkZSA9IC8oPzpcW1teXF1dKlxdfFteXFtcXV18XF0oPz1bXlxbXSpcXSkpKi87CmlubGluZS5faHJlZiA9IC9ccyo8PyhbXHNcU10qPyk+Pyg/OlxzK1snIl0oW1xzXFNdKj8pWyciXSk/XHMqLzsKCmlubGluZS5saW5rID0gcmVwbGFjZShpbmxpbmUubGluaykKICAoJ2luc2lkZScsIGlubGluZS5faW5zaWRlKQogICgnaHJlZicsIGlubGluZS5faHJlZikKICAoKTsKCmlubGluZS5yZWZsaW5rID0gcmVwbGFjZShpbmxpbmUucmVmbGluaykKICAoJ2luc2lkZScsIGlubGluZS5faW5zaWRlKQogICgpOwoKLyoqCiAqIE5vcm1hbCBJbmxpbmUgR3JhbW1hcgogKi8KCmlubGluZS5ub3JtYWwgPSBtZXJnZSh7fSwgaW5saW5lKTsKCi8qKgogKiBQZWRhbnRpYyBJbmxpbmUgR3JhbW1hcgogKi8KCmlubGluZS5wZWRhbnRpYyA9IG1lcmdlKHt9LCBpbmxpbmUubm9ybWFsLCB7CiAgc3Ryb25nOiAvXl9fKD89XFMpKFtcc1xTXSo/XFMpX18oPyFfKXxeXCpcKig/PVxTKShbXHNcU10qP1xTKVwqXCooPyFcKikvLAogIGVtOiAvXl8oPz1cUykoW1xzXFNdKj9cUylfKD8hXyl8XlwqKD89XFMpKFtcc1xTXSo/XFMpXCooPyFcKikvCn0pOwoKLyoqCiAqIEdGTSBJbmxpbmUgR3JhbW1hcgogKi8KCmlubGluZS5nZm0gPSBtZXJnZSh7fSwgaW5saW5lLm5vcm1hbCwgewogIGVzY2FwZTogcmVwbGFjZShpbmxpbmUuZXNjYXBlKSgnXSknLCAnfnxdKScpKCksCiAgdXJsOiAvXihodHRwcz86XC9cL1teXHM8XStbXjwuLDo7IicpXF1cc10pLywKICBkZWw6IC9efn4oPz1cUykoW1xzXFNdKj9cUyl+fi8sCiAgdGV4dDogcmVwbGFjZShpbmxpbmUudGV4dCkKICAgICgnXXwnLCAnfl18JykKICAgICgnfCcsICd8aHR0cHM/Oi8vfCcpCiAgICAoKQp9KTsKCi8qKgogKiBHRk0gKyBMaW5lIEJyZWFrcyBJbmxpbmUgR3JhbW1hcgogKi8KCmlubGluZS5icmVha3MgPSBtZXJnZSh7fSwgaW5saW5lLmdmbSwgewogIGJyOiByZXBsYWNlKGlubGluZS5icikoJ3syLH0nLCAnKicpKCksCiAgdGV4dDogcmVwbGFjZShpbmxpbmUuZ2ZtLnRleHQpKCd7Mix9JywgJyonKSgpCn0pOwoKLyoqCiAqIElubGluZSBMZXhlciAmIENvbXBpbGVyCiAqLwoKZnVuY3Rpb24gSW5saW5lTGV4ZXIobGlua3MsIG9wdGlvbnMpIHsKICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zIHx8IG1hcmtlZC5kZWZhdWx0czsKICB0aGlzLmxpbmtzID0gbGlua3M7CiAgdGhpcy5ydWxlcyA9IGlubGluZS5ub3JtYWw7CiAgdGhpcy5yZW5kZXJlciA9IHRoaXMub3B0aW9ucy5yZW5kZXJlciB8fCBuZXcgUmVuZGVyZXI7CiAgdGhpcy5yZW5kZXJlci5vcHRpb25zID0gdGhpcy5vcHRpb25zOwoKICBpZiAoIXRoaXMubGlua3MpIHsKICAgIHRocm93IG5ldwogICAgICBFcnJvcignVG9rZW5zIGFycmF5IHJlcXVpcmVzIGEgYGxpbmtzYCBwcm9wZXJ0eS4nKTsKICB9CgogIGlmICh0aGlzLm9wdGlvbnMuZ2ZtKSB7CiAgICBpZiAodGhpcy5vcHRpb25zLmJyZWFrcykgewogICAgICB0aGlzLnJ1bGVzID0gaW5saW5lLmJyZWFrczsKICAgIH0gZWxzZSB7CiAgICAgIHRoaXMucnVsZXMgPSBpbmxpbmUuZ2ZtOwogICAgfQogIH0gZWxzZSBpZiAodGhpcy5vcHRpb25zLnBlZGFudGljKSB7CiAgICB0aGlzLnJ1bGVzID0gaW5saW5lLnBlZGFudGljOwogIH0KfQoKLyoqCiAqIEV4cG9zZSBJbmxpbmUgUnVsZXMKICovCgpJbmxpbmVMZXhlci5ydWxlcyA9IGlubGluZTsKCi8qKgogKiBTdGF0aWMgTGV4aW5nL0NvbXBpbGluZyBNZXRob2QKICovCgpJbmxpbmVMZXhlci5vdXRwdXQgPSBmdW5jdGlvbihzcmMsIGxpbmtzLCBvcHRpb25zKSB7CiAgdmFyIGlubGluZSA9IG5ldyBJbmxpbmVMZXhlcihsaW5rcywgb3B0aW9ucyk7CiAgcmV0dXJuIGlubGluZS5vdXRwdXQoc3JjKTsKfTsKCi8qKgogKiBMZXhpbmcvQ29tcGlsaW5nCiAqLwoKSW5saW5lTGV4ZXIucHJvdG90eXBlLm91dHB1dCA9IGZ1bmN0aW9uKHNyYykgewogIHZhciBvdXQgPSAnJwogICAgLCBsaW5rCiAgICAsIHRleHQKICAgICwgaHJlZgogICAgLCBjYXA7CgogIHdoaWxlIChzcmMpIHsKICAgIC8vIGVzY2FwZQogICAgaWYgKGNhcCA9IHRoaXMucnVsZXMuZXNjYXBlLmV4ZWMoc3JjKSkgewogICAgICBzcmMgPSBzcmMuc3Vic3RyaW5nKGNhcFswXS5sZW5ndGgpOwogICAgICBvdXQgKz0gY2FwWzFdOwogICAgICBjb250aW51ZTsKICAgIH0KCiAgICAvLyBhdXRvbGluawogICAgaWYgKGNhcCA9IHRoaXMucnVsZXMuYXV0b2xpbmsuZXhlYyhzcmMpKSB7CiAgICAgIHNyYyA9IHNyYy5zdWJzdHJpbmcoY2FwWzBdLmxlbmd0aCk7CiAgICAgIGlmIChjYXBbMl0gPT09ICdAJykgewogICAgICAgIHRleHQgPSBjYXBbMV0uY2hhckF0KDYpID09PSAnOicKICAgICAgICAgID8gdGhpcy5tYW5nbGUoY2FwWzFdLnN1YnN0cmluZyg3KSkKICAgICAgICAgIDogdGhpcy5tYW5nbGUoY2FwWzFdKTsKICAgICAgICBocmVmID0gdGhpcy5tYW5nbGUoJ21haWx0bzonKSArIHRleHQ7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgdGV4dCA9IGVzY2FwZShjYXBbMV0pOwogICAgICAgIGhyZWYgPSB0ZXh0OwogICAgICB9CiAgICAgIG91dCArPSB0aGlzLnJlbmRlcmVyLmxpbmsoaHJlZiwgbnVsbCwgdGV4dCk7CiAgICAgIGNvbnRpbnVlOwogICAgfQoKICAgIC8vIHVybCAoZ2ZtKQogICAgaWYgKCF0aGlzLmluTGluayAmJiAoY2FwID0gdGhpcy5ydWxlcy51cmwuZXhlYyhzcmMpKSkgewogICAgICBzcmMgPSBzcmMuc3Vic3RyaW5nKGNhcFswXS5sZW5ndGgpOwogICAgICB0ZXh0ID0gZXNjYXBlKGNhcFsxXSk7CiAgICAgIGhyZWYgPSB0ZXh0OwogICAgICBvdXQgKz0gdGhpcy5yZW5kZXJlci5saW5rKGhyZWYsIG51bGwsIHRleHQpOwogICAgICBjb250aW51ZTsKICAgIH0KCiAgICAvLyB0YWcKICAgIGlmIChjYXAgPSB0aGlzLnJ1bGVzLnRhZy5leGVjKHNyYykpIHsKICAgICAgaWYgKCF0aGlzLmluTGluayAmJiAvXjxhIC9pLnRlc3QoY2FwWzBdKSkgewogICAgICAgIHRoaXMuaW5MaW5rID0gdHJ1ZTsKICAgICAgfSBlbHNlIGlmICh0aGlzLmluTGluayAmJiAvXjxcL2E+L2kudGVzdChjYXBbMF0pKSB7CiAgICAgICAgdGhpcy5pbkxpbmsgPSBmYWxzZTsKICAgICAgfQogICAgICBzcmMgPSBzcmMuc3Vic3RyaW5nKGNhcFswXS5sZW5ndGgpOwogICAgICBvdXQgKz0gdGhpcy5vcHRpb25zLnNhbml0aXplCiAgICAgICAgPyB0aGlzLm9wdGlvbnMuc2FuaXRpemVyCiAgICAgICAgICA/IHRoaXMub3B0aW9ucy5zYW5pdGl6ZXIoY2FwWzBdKQogICAgICAgICAgOiBlc2NhcGUoY2FwWzBdKQogICAgICAgIDogY2FwWzBdCiAgICAgIGNvbnRpbnVlOwogICAgfQoKICAgIC8vIGxpbmsKICAgIGlmIChjYXAgPSB0aGlzLnJ1bGVzLmxpbmsuZXhlYyhzcmMpKSB7CiAgICAgIHNyYyA9IHNyYy5zdWJzdHJpbmcoY2FwWzBdLmxlbmd0aCk7CiAgICAgIHRoaXMuaW5MaW5rID0gdHJ1ZTsKICAgICAgb3V0ICs9IHRoaXMub3V0cHV0TGluayhjYXAsIHsKICAgICAgICBocmVmOiBjYXBbMl0sCiAgICAgICAgdGl0bGU6IGNhcFszXQogICAgICB9KTsKICAgICAgdGhpcy5pbkxpbmsgPSBmYWxzZTsKICAgICAgY29udGludWU7CiAgICB9CgogICAgLy8gcmVmbGluaywgbm9saW5rCiAgICBpZiAoKGNhcCA9IHRoaXMucnVsZXMucmVmbGluay5leGVjKHNyYykpCiAgICAgICAgfHwgKGNhcCA9IHRoaXMucnVsZXMubm9saW5rLmV4ZWMoc3JjKSkpIHsKICAgICAgc3JjID0gc3JjLnN1YnN0cmluZyhjYXBbMF0ubGVuZ3RoKTsKICAgICAgbGluayA9IChjYXBbMl0gfHwgY2FwWzFdKS5yZXBsYWNlKC9ccysvZywgJyAnKTsKICAgICAgbGluayA9IHRoaXMubGlua3NbbGluay50b0xvd2VyQ2FzZSgpXTsKICAgICAgaWYgKCFsaW5rIHx8ICFsaW5rLmhyZWYpIHsKICAgICAgICBvdXQgKz0gY2FwWzBdLmNoYXJBdCgwKTsKICAgICAgICBzcmMgPSBjYXBbMF0uc3Vic3RyaW5nKDEpICsgc3JjOwogICAgICAgIGNvbnRpbnVlOwogICAgICB9CiAgICAgIHRoaXMuaW5MaW5rID0gdHJ1ZTsKICAgICAgb3V0ICs9IHRoaXMub3V0cHV0TGluayhjYXAsIGxpbmspOwogICAgICB0aGlzLmluTGluayA9IGZhbHNlOwogICAgICBjb250aW51ZTsKICAgIH0KCiAgICAvLyBzdHJvbmcKICAgIGlmIChjYXAgPSB0aGlzLnJ1bGVzLnN0cm9uZy5leGVjKHNyYykpIHsKICAgICAgc3JjID0gc3JjLnN1YnN0cmluZyhjYXBbMF0ubGVuZ3RoKTsKICAgICAgb3V0ICs9IHRoaXMucmVuZGVyZXIuc3Ryb25nKHRoaXMub3V0cHV0KGNhcFsyXSB8fCBjYXBbMV0pKTsKICAgICAgY29udGludWU7CiAgICB9CgogICAgLy8gZW0KICAgIGlmIChjYXAgPSB0aGlzLnJ1bGVzLmVtLmV4ZWMoc3JjKSkgewogICAgICBzcmMgPSBzcmMuc3Vic3RyaW5nKGNhcFswXS5sZW5ndGgpOwogICAgICBvdXQgKz0gdGhpcy5yZW5kZXJlci5lbSh0aGlzLm91dHB1dChjYXBbMl0gfHwgY2FwWzFdKSk7CiAgICAgIGNvbnRpbnVlOwogICAgfQoKICAgIC8vIGNvZGUKICAgIGlmIChjYXAgPSB0aGlzLnJ1bGVzLmNvZGUuZXhlYyhzcmMpKSB7CiAgICAgIHNyYyA9IHNyYy5zdWJzdHJpbmcoY2FwWzBdLmxlbmd0aCk7CiAgICAgIG91dCArPSB0aGlzLnJlbmRlcmVyLmNvZGVzcGFuKGVzY2FwZShjYXBbMl0sIHRydWUpKTsKICAgICAgY29udGludWU7CiAgICB9CgogICAgLy8gYnIKICAgIGlmIChjYXAgPSB0aGlzLnJ1bGVzLmJyLmV4ZWMoc3JjKSkgewogICAgICBzcmMgPSBzcmMuc3Vic3RyaW5nKGNhcFswXS5sZW5ndGgpOwogICAgICBvdXQgKz0gdGhpcy5yZW5kZXJlci5icigpOwogICAgICBjb250aW51ZTsKICAgIH0KCiAgICAvLyBkZWwgKGdmbSkKICAgIGlmIChjYXAgPSB0aGlzLnJ1bGVzLmRlbC5leGVjKHNyYykpIHsKICAgICAgc3JjID0gc3JjLnN1YnN0cmluZyhjYXBbMF0ubGVuZ3RoKTsKICAgICAgb3V0ICs9IHRoaXMucmVuZGVyZXIuZGVsKHRoaXMub3V0cHV0KGNhcFsxXSkpOwogICAgICBjb250aW51ZTsKICAgIH0KCiAgICAvLyB0ZXh0CiAgICBpZiAoY2FwID0gdGhpcy5ydWxlcy50ZXh0LmV4ZWMoc3JjKSkgewogICAgICBzcmMgPSBzcmMuc3Vic3RyaW5nKGNhcFswXS5sZW5ndGgpOwogICAgICBvdXQgKz0gdGhpcy5yZW5kZXJlci50ZXh0KGVzY2FwZSh0aGlzLnNtYXJ0eXBhbnRzKGNhcFswXSkpKTsKICAgICAgY29udGludWU7CiAgICB9CgogICAgaWYgKHNyYykgewogICAgICB0aHJvdyBuZXcKICAgICAgICBFcnJvcignSW5maW5pdGUgbG9vcCBvbiBieXRlOiAnICsgc3JjLmNoYXJDb2RlQXQoMCkpOwogICAgfQogIH0KCiAgcmV0dXJuIG91dDsKfTsKCi8qKgogKiBDb21waWxlIExpbmsKICovCgpJbmxpbmVMZXhlci5wcm90b3R5cGUub3V0cHV0TGluayA9IGZ1bmN0aW9uKGNhcCwgbGluaykgewogIHZhciBocmVmID0gZXNjYXBlKGxpbmsuaHJlZikKICAgICwgdGl0bGUgPSBsaW5rLnRpdGxlID8gZXNjYXBlKGxpbmsudGl0bGUpIDogbnVsbDsKCiAgcmV0dXJuIGNhcFswXS5jaGFyQXQoMCkgIT09ICchJwogICAgPyB0aGlzLnJlbmRlcmVyLmxpbmsoaHJlZiwgdGl0bGUsIHRoaXMub3V0cHV0KGNhcFsxXSkpCiAgICA6IHRoaXMucmVuZGVyZXIuaW1hZ2UoaHJlZiwgdGl0bGUsIGVzY2FwZShjYXBbMV0pKTsKfTsKCi8qKgogKiBTbWFydHlwYW50cyBUcmFuc2Zvcm1hdGlvbnMKICovCgpJbmxpbmVMZXhlci5wcm90b3R5cGUuc21hcnR5cGFudHMgPSBmdW5jdGlvbih0ZXh0KSB7CiAgaWYgKCF0aGlzLm9wdGlvbnMuc21hcnR5cGFudHMpIHJldHVybiB0ZXh0OwogIHJldHVybiB0ZXh0CiAgICAvLyBlbS1kYXNoZXMKICAgIC5yZXBsYWNlKC8tLS0vZywgJ1x1MjAxNCcpCiAgICAvLyBlbi1kYXNoZXMKICAgIC5yZXBsYWNlKC8tLS9nLCAnXHUyMDEzJykKICAgIC8vIG9wZW5pbmcgc2luZ2xlcwogICAgLnJlcGxhY2UoLyhefFstXHUyMDE0LyhcW3siXHNdKScvZywgJyQxXHUyMDE4JykKICAgIC8vIGNsb3Npbmcgc2luZ2xlcyAmIGFwb3N0cm9waGVzCiAgICAucmVwbGFjZSgvJy9nLCAnXHUyMDE5JykKICAgIC8vIG9wZW5pbmcgZG91YmxlcwogICAgLnJlcGxhY2UoLyhefFstXHUyMDE0LyhcW3tcdTIwMThcc10pIi9nLCAnJDFcdTIwMWMnKQogICAgLy8gY2xvc2luZyBkb3VibGVzCiAgICAucmVwbGFjZSgvIi9nLCAnXHUyMDFkJykKICAgIC8vIGVsbGlwc2VzCiAgICAucmVwbGFjZSgvXC57M30vZywgJ1x1MjAyNicpOwp9OwoKLyoqCiAqIE1hbmdsZSBMaW5rcwogKi8KCklubGluZUxleGVyLnByb3RvdHlwZS5tYW5nbGUgPSBmdW5jdGlvbih0ZXh0KSB7CiAgaWYgKCF0aGlzLm9wdGlvbnMubWFuZ2xlKSByZXR1cm4gdGV4dDsKICB2YXIgb3V0ID0gJycKICAgICwgbCA9IHRleHQubGVuZ3RoCiAgICAsIGkgPSAwCiAgICAsIGNoOwoKICBmb3IgKDsgaSA8IGw7IGkrKykgewogICAgY2ggPSB0ZXh0LmNoYXJDb2RlQXQoaSk7CiAgICBpZiAoTWF0aC5yYW5kb20oKSA+IDAuNSkgewogICAgICBjaCA9ICd4JyArIGNoLnRvU3RyaW5nKDE2KTsKICAgIH0KICAgIG91dCArPSAnJiMnICsgY2ggKyAnOyc7CiAgfQoKICByZXR1cm4gb3V0Owp9OwoKLyoqCiAqIFJlbmRlcmVyCiAqLwoKZnVuY3Rpb24gUmVuZGVyZXIob3B0aW9ucykgewogIHRoaXMub3B0aW9ucyA9IG9wdGlvbnMgfHwge307Cn0KClJlbmRlcmVyLnByb3RvdHlwZS5jb2RlID0gZnVuY3Rpb24oY29kZSwgbGFuZywgZXNjYXBlZCkgewogIGlmICh0aGlzLm9wdGlvbnMuaGlnaGxpZ2h0KSB7CiAgICB2YXIgb3V0ID0gdGhpcy5vcHRpb25zLmhpZ2hsaWdodChjb2RlLCBsYW5nKTsKICAgIGlmIChvdXQgIT0gbnVsbCAmJiBvdXQgIT09IGNvZGUpIHsKICAgICAgZXNjYXBlZCA9IHRydWU7CiAgICAgIGNvZGUgPSBvdXQ7CiAgICB9CiAgfQoKICBpZiAoIWxhbmcpIHsKICAgIHJldHVybiAnPHByZT48Y29kZT4nCiAgICAgICsgKGVzY2FwZWQgPyBjb2RlIDogZXNjYXBlKGNvZGUsIHRydWUpKQogICAgICArICdcbjwvY29kZT48L3ByZT4nOwogIH0KCiAgcmV0dXJuICc8cHJlPjxjb2RlIGNsYXNzPSInCiAgICArIHRoaXMub3B0aW9ucy5sYW5nUHJlZml4CiAgICArIGVzY2FwZShsYW5nLCB0cnVlKQogICAgKyAnIj4nCiAgICArIChlc2NhcGVkID8gY29kZSA6IGVzY2FwZShjb2RlLCB0cnVlKSkKICAgICsgJ1xuPC9jb2RlPjwvcHJlPlxuJzsKfTsKClJlbmRlcmVyLnByb3RvdHlwZS5ibG9ja3F1b3RlID0gZnVuY3Rpb24ocXVvdGUpIHsKICByZXR1cm4gJzxibG9ja3F1b3RlPlxuJyArIHF1b3RlICsgJzwvYmxvY2txdW90ZT5cbic7Cn07CgpSZW5kZXJlci5wcm90b3R5cGUuaHRtbCA9IGZ1bmN0aW9uKGh0bWwpIHsKICByZXR1cm4gaHRtbDsKfTsKClJlbmRlcmVyLnByb3RvdHlwZS5oZWFkaW5nID0gZnVuY3Rpb24odGV4dCwgbGV2ZWwsIHJhdykgewogIHJldHVybiAnPGgnCiAgICArIGxldmVsCiAgICArICcgaWQ9IicKICAgICsgdGhpcy5vcHRpb25zLmhlYWRlclByZWZpeAogICAgKyByYXcudG9Mb3dlckNhc2UoKS5yZXBsYWNlKC9bXlx3XSsvZywgJy0nKQogICAgKyAnIj4nCiAgICArIHRleHQKICAgICsgJzwvaCcKICAgICsgbGV2ZWwKICAgICsgJz5cbic7Cn07CgpSZW5kZXJlci5wcm90b3R5cGUuaHIgPSBmdW5jdGlvbigpIHsKICByZXR1cm4gdGhpcy5vcHRpb25zLnhodG1sID8gJzxoci8+XG4nIDogJzxocj5cbic7Cn07CgpSZW5kZXJlci5wcm90b3R5cGUubGlzdCA9IGZ1bmN0aW9uKGJvZHksIG9yZGVyZWQpIHsKICB2YXIgdHlwZSA9IG9yZGVyZWQgPyAnb2wnIDogJ3VsJzsKICByZXR1cm4gJzwnICsgdHlwZSArICc+XG4nICsgYm9keSArICc8LycgKyB0eXBlICsgJz5cbic7Cn07CgpSZW5kZXJlci5wcm90b3R5cGUubGlzdGl0ZW0gPSBmdW5jdGlvbih0ZXh0KSB7CiAgcmV0dXJuICc8bGk+JyArIHRleHQgKyAnPC9saT5cbic7Cn07CgpSZW5kZXJlci5wcm90b3R5cGUucGFyYWdyYXBoID0gZnVuY3Rpb24odGV4dCkgewogIHJldHVybiAnPHA+JyArIHRleHQgKyAnPC9wPlxuJzsKfTsKClJlbmRlcmVyLnByb3RvdHlwZS50YWJsZSA9IGZ1bmN0aW9uKGhlYWRlciwgYm9keSkgewogIHJldHVybiAnPHRhYmxlPlxuJwogICAgKyAnPHRoZWFkPlxuJwogICAgKyBoZWFkZXIKICAgICsgJzwvdGhlYWQ+XG4nCiAgICArICc8dGJvZHk+XG4nCiAgICArIGJvZHkKICAgICsgJzwvdGJvZHk+XG4nCiAgICArICc8L3RhYmxlPlxuJzsKfTsKClJlbmRlcmVyLnByb3RvdHlwZS50YWJsZXJvdyA9IGZ1bmN0aW9uKGNvbnRlbnQpIHsKICByZXR1cm4gJzx0cj5cbicgKyBjb250ZW50ICsgJzwvdHI+XG4nOwp9OwoKUmVuZGVyZXIucHJvdG90eXBlLnRhYmxlY2VsbCA9IGZ1bmN0aW9uKGNvbnRlbnQsIGZsYWdzKSB7CiAgdmFyIHR5cGUgPSBmbGFncy5oZWFkZXIgPyAndGgnIDogJ3RkJzsKICB2YXIgdGFnID0gZmxhZ3MuYWxpZ24KICAgID8gJzwnICsgdHlwZSArICcgc3R5bGU9InRleHQtYWxpZ246JyArIGZsYWdzLmFsaWduICsgJyI+JwogICAgOiAnPCcgKyB0eXBlICsgJz4nOwogIHJldHVybiB0YWcgKyBjb250ZW50ICsgJzwvJyArIHR5cGUgKyAnPlxuJzsKfTsKCi8vIHNwYW4gbGV2ZWwgcmVuZGVyZXIKUmVuZGVyZXIucHJvdG90eXBlLnN0cm9uZyA9IGZ1bmN0aW9uKHRleHQpIHsKICByZXR1cm4gJzxzdHJvbmc+JyArIHRleHQgKyAnPC9zdHJvbmc+JzsKfTsKClJlbmRlcmVyLnByb3RvdHlwZS5lbSA9IGZ1bmN0aW9uKHRleHQpIHsKICByZXR1cm4gJzxlbT4nICsgdGV4dCArICc8L2VtPic7Cn07CgpSZW5kZXJlci5wcm90b3R5cGUuY29kZXNwYW4gPSBmdW5jdGlvbih0ZXh0KSB7CiAgcmV0dXJuICc8Y29kZT4nICsgdGV4dCArICc8L2NvZGU+JzsKfTsKClJlbmRlcmVyLnByb3RvdHlwZS5iciA9IGZ1bmN0aW9uKCkgewogIHJldHVybiB0aGlzLm9wdGlvbnMueGh0bWwgPyAnPGJyLz4nIDogJzxicj4nOwp9OwoKUmVuZGVyZXIucHJvdG90eXBlLmRlbCA9IGZ1bmN0aW9uKHRleHQpIHsKICByZXR1cm4gJzxkZWw+JyArIHRleHQgKyAnPC9kZWw+JzsKfTsKClJlbmRlcmVyLnByb3RvdHlwZS5saW5rID0gZnVuY3Rpb24oaHJlZiwgdGl0bGUsIHRleHQpIHsKICBpZiAodGhpcy5vcHRpb25zLnNhbml0aXplKSB7CiAgICB0cnkgewogICAgICB2YXIgcHJvdCA9IGRlY29kZVVSSUNvbXBvbmVudCh1bmVzY2FwZShocmVmKSkKICAgICAgICAucmVwbGFjZSgvW15cdzpdL2csICcnKQogICAgICAgIC50b0xvd2VyQ2FzZSgpOwogICAgfSBjYXRjaCAoZSkgewogICAgICByZXR1cm4gJyc7CiAgICB9CiAgICBpZiAocHJvdC5pbmRleE9mKCdqYXZhc2NyaXB0OicpID09PSAwIHx8IHByb3QuaW5kZXhPZigndmJzY3JpcHQ6JykgPT09IDApIHsKICAgICAgcmV0dXJuICcnOwogICAgfQogIH0KICB2YXIgb3V0ID0gJzxhIGhyZWY9IicgKyBocmVmICsgJyInOwogIGlmICh0aXRsZSkgewogICAgb3V0ICs9ICcgdGl0bGU9IicgKyB0aXRsZSArICciJzsKICB9CiAgb3V0ICs9ICc+JyArIHRleHQgKyAnPC9hPic7CiAgcmV0dXJuIG91dDsKfTsKClJlbmRlcmVyLnByb3RvdHlwZS5pbWFnZSA9IGZ1bmN0aW9uKGhyZWYsIHRpdGxlLCB0ZXh0KSB7CiAgdmFyIG91dCA9ICc8aW1nIHNyYz0iJyArIGhyZWYgKyAnIiBhbHQ9IicgKyB0ZXh0ICsgJyInOwogIGlmICh0aXRsZSkgewogICAgb3V0ICs9ICcgdGl0bGU9IicgKyB0aXRsZSArICciJzsKICB9CiAgb3V0ICs9IHRoaXMub3B0aW9ucy54aHRtbCA/ICcvPicgOiAnPic7CiAgcmV0dXJuIG91dDsKfTsKClJlbmRlcmVyLnByb3RvdHlwZS50ZXh0ID0gZnVuY3Rpb24odGV4dCkgewogIHJldHVybiB0ZXh0Owp9OwoKLyoqCiAqIFBhcnNpbmcgJiBDb21waWxpbmcKICovCgpmdW5jdGlvbiBQYXJzZXIob3B0aW9ucykgewogIHRoaXMudG9rZW5zID0gW107CiAgdGhpcy50b2tlbiA9IG51bGw7CiAgdGhpcy5vcHRpb25zID0gb3B0aW9ucyB8fCBtYXJrZWQuZGVmYXVsdHM7CiAgdGhpcy5vcHRpb25zLnJlbmRlcmVyID0gdGhpcy5vcHRpb25zLnJlbmRlcmVyIHx8IG5ldyBSZW5kZXJlcjsKICB0aGlzLnJlbmRlcmVyID0gdGhpcy5vcHRpb25zLnJlbmRlcmVyOwogIHRoaXMucmVuZGVyZXIub3B0aW9ucyA9IHRoaXMub3B0aW9uczsKfQoKLyoqCiAqIFN0YXRpYyBQYXJzZSBNZXRob2QKICovCgpQYXJzZXIucGFyc2UgPSBmdW5jdGlvbihzcmMsIG9wdGlvbnMsIHJlbmRlcmVyKSB7CiAgdmFyIHBhcnNlciA9IG5ldyBQYXJzZXIob3B0aW9ucywgcmVuZGVyZXIpOwogIHJldHVybiBwYXJzZXIucGFyc2Uoc3JjKTsKfTsKCi8qKgogKiBQYXJzZSBMb29wCiAqLwoKUGFyc2VyLnByb3RvdHlwZS5wYXJzZSA9IGZ1bmN0aW9uKHNyYykgewogIHRoaXMuaW5saW5lID0gbmV3IElubGluZUxleGVyKHNyYy5saW5rcywgdGhpcy5vcHRpb25zLCB0aGlzLnJlbmRlcmVyKTsKICB0aGlzLnRva2VucyA9IHNyYy5yZXZlcnNlKCk7CgogIHZhciBvdXQgPSAnJzsKICB3aGlsZSAodGhpcy5uZXh0KCkpIHsKICAgIG91dCArPSB0aGlzLnRvaygpOwogIH0KCiAgcmV0dXJuIG91dDsKfTsKCi8qKgogKiBOZXh0IFRva2VuCiAqLwoKUGFyc2VyLnByb3RvdHlwZS5uZXh0ID0gZnVuY3Rpb24oKSB7CiAgcmV0dXJuIHRoaXMudG9rZW4gPSB0aGlzLnRva2Vucy5wb3AoKTsKfTsKCi8qKgogKiBQcmV2aWV3IE5leHQgVG9rZW4KICovCgpQYXJzZXIucHJvdG90eXBlLnBlZWsgPSBmdW5jdGlvbigpIHsKICByZXR1cm4gdGhpcy50b2tlbnNbdGhpcy50b2tlbnMubGVuZ3RoIC0gMV0gfHwgMDsKfTsKCi8qKgogKiBQYXJzZSBUZXh0IFRva2VucwogKi8KClBhcnNlci5wcm90b3R5cGUucGFyc2VUZXh0ID0gZnVuY3Rpb24oKSB7CiAgdmFyIGJvZHkgPSB0aGlzLnRva2VuLnRleHQ7CgogIHdoaWxlICh0aGlzLnBlZWsoKS50eXBlID09PSAndGV4dCcpIHsKICAgIGJvZHkgKz0gJ1xuJyArIHRoaXMubmV4dCgpLnRleHQ7CiAgfQoKICByZXR1cm4gdGhpcy5pbmxpbmUub3V0cHV0KGJvZHkpOwp9OwoKLyoqCiAqIFBhcnNlIEN1cnJlbnQgVG9rZW4KICovCgpQYXJzZXIucHJvdG90eXBlLnRvayA9IGZ1bmN0aW9uKCkgewogIHN3aXRjaCAodGhpcy50b2tlbi50eXBlKSB7CiAgICBjYXNlICdzcGFjZSc6IHsKICAgICAgcmV0dXJuICcnOwogICAgfQogICAgY2FzZSAnaHInOiB7CiAgICAgIHJldHVybiB0aGlzLnJlbmRlcmVyLmhyKCk7CiAgICB9CiAgICBjYXNlICdoZWFkaW5nJzogewogICAgICByZXR1cm4gdGhpcy5yZW5kZXJlci5oZWFkaW5nKAogICAgICAgIHRoaXMuaW5saW5lLm91dHB1dCh0aGlzLnRva2VuLnRleHQpLAogICAgICAgIHRoaXMudG9rZW4uZGVwdGgsCiAgICAgICAgdGhpcy50b2tlbi50ZXh0KTsKICAgIH0KICAgIGNhc2UgJ2NvZGUnOiB7CiAgICAgIHJldHVybiB0aGlzLnJlbmRlcmVyLmNvZGUodGhpcy50b2tlbi50ZXh0LAogICAgICAgIHRoaXMudG9rZW4ubGFuZywKICAgICAgICB0aGlzLnRva2VuLmVzY2FwZWQpOwogICAgfQogICAgY2FzZSAndGFibGUnOiB7CiAgICAgIHZhciBoZWFkZXIgPSAnJwogICAgICAgICwgYm9keSA9ICcnCiAgICAgICAgLCBpCiAgICAgICAgLCByb3cKICAgICAgICAsIGNlbGwKICAgICAgICAsIGZsYWdzCiAgICAgICAgLCBqOwoKICAgICAgLy8gaGVhZGVyCiAgICAgIGNlbGwgPSAnJzsKICAgICAgZm9yIChpID0gMDsgaSA8IHRoaXMudG9rZW4uaGVhZGVyLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgZmxhZ3MgPSB7IGhlYWRlcjogdHJ1ZSwgYWxpZ246IHRoaXMudG9rZW4uYWxpZ25baV0gfTsKICAgICAgICBjZWxsICs9IHRoaXMucmVuZGVyZXIudGFibGVjZWxsKAogICAgICAgICAgdGhpcy5pbmxpbmUub3V0cHV0KHRoaXMudG9rZW4uaGVhZGVyW2ldKSwKICAgICAgICAgIHsgaGVhZGVyOiB0cnVlLCBhbGlnbjogdGhpcy50b2tlbi5hbGlnbltpXSB9CiAgICAgICAgKTsKICAgICAgfQogICAgICBoZWFkZXIgKz0gdGhpcy5yZW5kZXJlci50YWJsZXJvdyhjZWxsKTsKCiAgICAgIGZvciAoaSA9IDA7IGkgPCB0aGlzLnRva2VuLmNlbGxzLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgcm93ID0gdGhpcy50b2tlbi5jZWxsc1tpXTsKCiAgICAgICAgY2VsbCA9ICcnOwogICAgICAgIGZvciAoaiA9IDA7IGogPCByb3cubGVuZ3RoOyBqKyspIHsKICAgICAgICAgIGNlbGwgKz0gdGhpcy5yZW5kZXJlci50YWJsZWNlbGwoCiAgICAgICAgICAgIHRoaXMuaW5saW5lLm91dHB1dChyb3dbal0pLAogICAgICAgICAgICB7IGhlYWRlcjogZmFsc2UsIGFsaWduOiB0aGlzLnRva2VuLmFsaWduW2pdIH0KICAgICAgICAgICk7CiAgICAgICAgfQoKICAgICAgICBib2R5ICs9IHRoaXMucmVuZGVyZXIudGFibGVyb3coY2VsbCk7CiAgICAgIH0KICAgICAgcmV0dXJuIHRoaXMucmVuZGVyZXIudGFibGUoaGVhZGVyLCBib2R5KTsKICAgIH0KICAgIGNhc2UgJ2Jsb2NrcXVvdGVfc3RhcnQnOiB7CiAgICAgIHZhciBib2R5ID0gJyc7CgogICAgICB3aGlsZSAodGhpcy5uZXh0KCkudHlwZSAhPT0gJ2Jsb2NrcXVvdGVfZW5kJykgewogICAgICAgIGJvZHkgKz0gdGhpcy50b2soKTsKICAgICAgfQoKICAgICAgcmV0dXJuIHRoaXMucmVuZGVyZXIuYmxvY2txdW90ZShib2R5KTsKICAgIH0KICAgIGNhc2UgJ2xpc3Rfc3RhcnQnOiB7CiAgICAgIHZhciBib2R5ID0gJycKICAgICAgICAsIG9yZGVyZWQgPSB0aGlzLnRva2VuLm9yZGVyZWQ7CgogICAgICB3aGlsZSAodGhpcy5uZXh0KCkudHlwZSAhPT0gJ2xpc3RfZW5kJykgewogICAgICAgIGJvZHkgKz0gdGhpcy50b2soKTsKICAgICAgfQoKICAgICAgcmV0dXJuIHRoaXMucmVuZGVyZXIubGlzdChib2R5LCBvcmRlcmVkKTsKICAgIH0KICAgIGNhc2UgJ2xpc3RfaXRlbV9zdGFydCc6IHsKICAgICAgdmFyIGJvZHkgPSAnJzsKCiAgICAgIHdoaWxlICh0aGlzLm5leHQoKS50eXBlICE9PSAnbGlzdF9pdGVtX2VuZCcpIHsKICAgICAgICBib2R5ICs9IHRoaXMudG9rZW4udHlwZSA9PT0gJ3RleHQnCiAgICAgICAgICA/IHRoaXMucGFyc2VUZXh0KCkKICAgICAgICAgIDogdGhpcy50b2soKTsKICAgICAgfQoKICAgICAgcmV0dXJuIHRoaXMucmVuZGVyZXIubGlzdGl0ZW0oYm9keSk7CiAgICB9CiAgICBjYXNlICdsb29zZV9pdGVtX3N0YXJ0JzogewogICAgICB2YXIgYm9keSA9ICcnOwoKICAgICAgd2hpbGUgKHRoaXMubmV4dCgpLnR5cGUgIT09ICdsaXN0X2l0ZW1fZW5kJykgewogICAgICAgIGJvZHkgKz0gdGhpcy50b2soKTsKICAgICAgfQoKICAgICAgcmV0dXJuIHRoaXMucmVuZGVyZXIubGlzdGl0ZW0oYm9keSk7CiAgICB9CiAgICBjYXNlICdodG1sJzogewogICAgICB2YXIgaHRtbCA9ICF0aGlzLnRva2VuLnByZSAmJiAhdGhpcy5vcHRpb25zLnBlZGFudGljCiAgICAgICAgPyB0aGlzLmlubGluZS5vdXRwdXQodGhpcy50b2tlbi50ZXh0KQogICAgICAgIDogdGhpcy50b2tlbi50ZXh0OwogICAgICByZXR1cm4gdGhpcy5yZW5kZXJlci5odG1sKGh0bWwpOwogICAgfQogICAgY2FzZSAncGFyYWdyYXBoJzogewogICAgICByZXR1cm4gdGhpcy5yZW5kZXJlci5wYXJhZ3JhcGgodGhpcy5pbmxpbmUub3V0cHV0KHRoaXMudG9rZW4udGV4dCkpOwogICAgfQogICAgY2FzZSAndGV4dCc6IHsKICAgICAgcmV0dXJuIHRoaXMucmVuZGVyZXIucGFyYWdyYXBoKHRoaXMucGFyc2VUZXh0KCkpOwogICAgfQogIH0KfTsKCi8qKgogKiBIZWxwZXJzCiAqLwoKZnVuY3Rpb24gZXNjYXBlKGh0bWwsIGVuY29kZSkgewogIHJldHVybiBodG1sCiAgICAucmVwbGFjZSghZW5jb2RlID8gLyYoPyEjP1x3KzspL2cgOiAvJi9nLCAnJmFtcDsnKQogICAgLnJlcGxhY2UoLzwvZywgJyZsdDsnKQogICAgLnJlcGxhY2UoLz4vZywgJyZndDsnKQogICAgLnJlcGxhY2UoLyIvZywgJyZxdW90OycpCiAgICAucmVwbGFjZSgvJy9nLCAnJiMzOTsnKTsKfQoKZnVuY3Rpb24gdW5lc2NhcGUoaHRtbCkgewogIHJldHVybiBodG1sLnJlcGxhY2UoLyYoWyNcd10rKTsvZywgZnVuY3Rpb24oXywgbikgewogICAgbiA9IG4udG9Mb3dlckNhc2UoKTsKICAgIGlmIChuID09PSAnY29sb24nKSByZXR1cm4gJzonOwogICAgaWYgKG4uY2hhckF0KDApID09PSAnIycpIHsKICAgICAgcmV0dXJuIG4uY2hhckF0KDEpID09PSAneCcKICAgICAgICA/IFN0cmluZy5mcm9tQ2hhckNvZGUocGFyc2VJbnQobi5zdWJzdHJpbmcoMiksIDE2KSkKICAgICAgICA6IFN0cmluZy5mcm9tQ2hhckNvZGUoK24uc3Vic3RyaW5nKDEpKTsKICAgIH0KICAgIHJldHVybiAnJzsKICB9KTsKfQoKZnVuY3Rpb24gcmVwbGFjZShyZWdleCwgb3B0KSB7CiAgcmVnZXggPSByZWdleC5zb3VyY2U7CiAgb3B0ID0gb3B0IHx8ICcnOwogIHJldHVybiBmdW5jdGlvbiBzZWxmKG5hbWUsIHZhbCkgewogICAgaWYgKCFuYW1lKSByZXR1cm4gbmV3IFJlZ0V4cChyZWdleCwgb3B0KTsKICAgIHZhbCA9IHZhbC5zb3VyY2UgfHwgdmFsOwogICAgdmFsID0gdmFsLnJlcGxhY2UoLyhefFteXFtdKVxeL2csICckMScpOwogICAgcmVnZXggPSByZWdleC5yZXBsYWNlKG5hbWUsIHZhbCk7CiAgICByZXR1cm4gc2VsZjsKICB9Owp9CgpmdW5jdGlvbiBub29wKCkge30Kbm9vcC5leGVjID0gbm9vcDsKCmZ1bmN0aW9uIG1lcmdlKG9iaikgewogIHZhciBpID0gMQogICAgLCB0YXJnZXQKICAgICwga2V5OwoKICBmb3IgKDsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgewogICAgdGFyZ2V0ID0gYXJndW1lbnRzW2ldOwogICAgZm9yIChrZXkgaW4gdGFyZ2V0KSB7CiAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwodGFyZ2V0LCBrZXkpKSB7CiAgICAgICAgb2JqW2tleV0gPSB0YXJnZXRba2V5XTsKICAgICAgfQogICAgfQogIH0KCiAgcmV0dXJuIG9iajsKfQoKCi8qKgogKiBNYXJrZWQKICovCgpmdW5jdGlvbiBtYXJrZWQoc3JjLCBvcHQsIGNhbGxiYWNrKSB7CiAgaWYgKGNhbGxiYWNrIHx8IHR5cGVvZiBvcHQgPT09ICdmdW5jdGlvbicpIHsKICAgIGlmICghY2FsbGJhY2spIHsKICAgICAgY2FsbGJhY2sgPSBvcHQ7CiAgICAgIG9wdCA9IG51bGw7CiAgICB9CgogICAgb3B0ID0gbWVyZ2Uoe30sIG1hcmtlZC5kZWZhdWx0cywgb3B0IHx8IHt9KTsKCiAgICB2YXIgaGlnaGxpZ2h0ID0gb3B0LmhpZ2hsaWdodAogICAgICAsIHRva2VucwogICAgICAsIHBlbmRpbmcKICAgICAgLCBpID0gMDsKCiAgICB0cnkgewogICAgICB0b2tlbnMgPSBMZXhlci5sZXgoc3JjLCBvcHQpCiAgICB9IGNhdGNoIChlKSB7CiAgICAgIHJldHVybiBjYWxsYmFjayhlKTsKICAgIH0KCiAgICBwZW5kaW5nID0gdG9rZW5zLmxlbmd0aDsKCiAgICB2YXIgZG9uZSA9IGZ1bmN0aW9uKGVycikgewogICAgICBpZiAoZXJyKSB7CiAgICAgICAgb3B0LmhpZ2hsaWdodCA9IGhpZ2hsaWdodDsKICAgICAgICByZXR1cm4gY2FsbGJhY2soZXJyKTsKICAgICAgfQoKICAgICAgdmFyIG91dDsKCiAgICAgIHRyeSB7CiAgICAgICAgb3V0ID0gUGFyc2VyLnBhcnNlKHRva2Vucywgb3B0KTsKICAgICAgfSBjYXRjaCAoZSkgewogICAgICAgIGVyciA9IGU7CiAgICAgIH0KCiAgICAgIG9wdC5oaWdobGlnaHQgPSBoaWdobGlnaHQ7CgogICAgICByZXR1cm4gZXJyCiAgICAgICAgPyBjYWxsYmFjayhlcnIpCiAgICAgICAgOiBjYWxsYmFjayhudWxsLCBvdXQpOwogICAgfTsKCiAgICBpZiAoIWhpZ2hsaWdodCB8fCBoaWdobGlnaHQubGVuZ3RoIDwgMykgewogICAgICByZXR1cm4gZG9uZSgpOwogICAgfQoKICAgIGRlbGV0ZSBvcHQuaGlnaGxpZ2h0OwoKICAgIGlmICghcGVuZGluZykgcmV0dXJuIGRvbmUoKTsKCiAgICBmb3IgKDsgaSA8IHRva2Vucy5sZW5ndGg7IGkrKykgewogICAgICAoZnVuY3Rpb24odG9rZW4pIHsKICAgICAgICBpZiAodG9rZW4udHlwZSAhPT0gJ2NvZGUnKSB7CiAgICAgICAgICByZXR1cm4gLS1wZW5kaW5nIHx8IGRvbmUoKTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIGhpZ2hsaWdodCh0b2tlbi50ZXh0LCB0b2tlbi5sYW5nLCBmdW5jdGlvbihlcnIsIGNvZGUpIHsKICAgICAgICAgIGlmIChlcnIpIHJldHVybiBkb25lKGVycik7CiAgICAgICAgICBpZiAoY29kZSA9PSBudWxsIHx8IGNvZGUgPT09IHRva2VuLnRleHQpIHsKICAgICAgICAgICAgcmV0dXJuIC0tcGVuZGluZyB8fCBkb25lKCk7CiAgICAgICAgICB9CiAgICAgICAgICB0b2tlbi50ZXh0ID0gY29kZTsKICAgICAgICAgIHRva2VuLmVzY2FwZWQgPSB0cnVlOwogICAgICAgICAgLS1wZW5kaW5nIHx8IGRvbmUoKTsKICAgICAgICB9KTsKICAgICAgfSkodG9rZW5zW2ldKTsKICAgIH0KCiAgICByZXR1cm47CiAgfQogIHRyeSB7CiAgICBpZiAob3B0KSBvcHQgPSBtZXJnZSh7fSwgbWFya2VkLmRlZmF1bHRzLCBvcHQpOwogICAgcmV0dXJuIFBhcnNlci5wYXJzZShMZXhlci5sZXgoc3JjLCBvcHQpLCBvcHQpOwogIH0gY2F0Y2ggKGUpIHsKICAgIGUubWVzc2FnZSArPSAnXG5QbGVhc2UgcmVwb3J0IHRoaXMgdG8gaHR0cHM6Ly9naXRodWIuY29tL2NoamovbWFya2VkLic7CiAgICBpZiAoKG9wdCB8fCBtYXJrZWQuZGVmYXVsdHMpLnNpbGVudCkgewogICAgICByZXR1cm4gJzxwPkFuIGVycm9yIG9jY3VyZWQ6PC9wPjxwcmU+JwogICAgICAgICsgZXNjYXBlKGUubWVzc2FnZSArICcnLCB0cnVlKQogICAgICAgICsgJzwvcHJlPic7CiAgICB9CiAgICB0aHJvdyBlOwogIH0KfQoKLyoqCiAqIE9wdGlvbnMKICovCgptYXJrZWQub3B0aW9ucyA9Cm1hcmtlZC5zZXRPcHRpb25zID0gZnVuY3Rpb24ob3B0KSB7CiAgbWVyZ2UobWFya2VkLmRlZmF1bHRzLCBvcHQpOwogIHJldHVybiBtYXJrZWQ7Cn07CgptYXJrZWQuZGVmYXVsdHMgPSB7CiAgZ2ZtOiB0cnVlLAogIHRhYmxlczogdHJ1ZSwKICBicmVha3M6IGZhbHNlLAogIHBlZGFudGljOiBmYWxzZSwKICBzYW5pdGl6ZTogZmFsc2UsCiAgc2FuaXRpemVyOiBudWxsLAogIG1hbmdsZTogdHJ1ZSwKICBzbWFydExpc3RzOiBmYWxzZSwKICBzaWxlbnQ6IGZhbHNlLAogIGhpZ2hsaWdodDogbnVsbCwKICBsYW5nUHJlZml4OiAnbGFuZy0nLAogIHNtYXJ0eXBhbnRzOiBmYWxzZSwKICBoZWFkZXJQcmVmaXg6ICcnLAogIHJlbmRlcmVyOiBuZXcgUmVuZGVyZXIsCiAgeGh0bWw6IGZhbHNlCn07CgovKioKICogRXhwb3NlCiAqLwoKbWFya2VkLlBhcnNlciA9IFBhcnNlcjsKbWFya2VkLnBhcnNlciA9IFBhcnNlci5wYXJzZTsKCm1hcmtlZC5SZW5kZXJlciA9IFJlbmRlcmVyOwoKbWFya2VkLkxleGVyID0gTGV4ZXI7Cm1hcmtlZC5sZXhlciA9IExleGVyLmxleDsKCm1hcmtlZC5JbmxpbmVMZXhlciA9IElubGluZUxleGVyOwptYXJrZWQuaW5saW5lTGV4ZXIgPSBJbmxpbmVMZXhlci5vdXRwdXQ7CgptYXJrZWQucGFyc2UgPSBtYXJrZWQ7CgppZiAodHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnKSB7CiAgbW9kdWxlLmV4cG9ydHMgPSBtYXJrZWQ7Cn0gZWxzZSBpZiAodHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kKSB7CiAgZGVmaW5lKGZ1bmN0aW9uKCkgeyByZXR1cm4gbWFya2VkOyB9KTsKfSBlbHNlIHsKICB0aGlzLm1hcmtlZCA9IG1hcmtlZDsKfQoKfSkuY2FsbChmdW5jdGlvbigpIHsKICByZXR1cm4gdGhpcyB8fCAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgPyB3aW5kb3cgOiBnbG9iYWwpOwp9KCkpOwo=`,
	"marked/marked.min.js": ``,
}
